@page
@model Web.Areas.StudentZone.Pages.Enrollments.IndexModel

<h3>@ViewData["Title"]</h3>

<h1>@Model.Student.FullName</h1>
<br />

<form method="post">
    <div class="form-group">
        <label asp-for="Semesters" class="form-label"></label>
        <select asp-for="Semester.Id" class="form-control" asp-items="ViewBag.SemesterId"
                id="semesterDropDown"></select>
    </div>

    <div class="form-group">
        <label asp-for="Course" class="form-label"></label>
        <select asp-for="Course.Id" class="form-control"
                asp-items="ViewBag.CourseId" id="courseDropDown"
                onchange="getSections()">
            <option value="" disabled selected style="display:none;">Select Course</option>
        </select>
        <small class="text-danger" id="courseValidation"></small>
    </div>

    <div class="form-group">
        <label asp-for="Section" class="form-label"></label>

        <select asp-for="Enrollment.SectionId" class="form-control"
                id="sectionDropDown" onchange="getSeats()">
            <option value="" disabled selected style="display:none;">Select Section</option>
        </select>
        <small class="text-danger" id="sectionValidation"></small>
    </div>
    <br />
    <div class="form-group">
        <label class="form-label">Seats Available :</label>
        <label class="form-label" id="seatCount"></label>
    </div>

    <div class="form-group">
        <label id="timeSlot1"></label>
        <label id="timeSlot2"></label>
    </div>
    <br />
    <input type="submit" value="Save" class="btn btn-primary" id="submitButton" />

    <input type="hidden" asp-for="Student.Id" id="studentId"/>
</form>
<br />
<table class="table table-striped table-hover" id="compolsoryTable">
    <thead class="thead-dark">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Course.Code)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Course.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Course.Credits)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Enrollment.Section.Number)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Enrollment.Section.Semester.Season)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Enrollment.Section.Schedule.TimeSlots[0].DayOfWeek)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Enrollment.Section.Schedule.TimeSlots[0].StartTime)
            </th>
            <th></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var enrollment in Model.Student.Enrollments)
        {
        <tr>
            <td>@enrollment.Section.Course.Code</td>
            <td>@enrollment.Section.Course.Name</td>
            <td>@enrollment.Section.Course.Credits</td>
            <td>@enrollment.Section.Number</td>
            <td>@enrollment.Section.Semester.Season @enrollment.Section.Semester.Year</td>
            <td>
                @Html.DisplayFor(model => enrollment.Section.Schedule.TimeSlots[0].DayOfWeek) <br />
                @enrollment.Section.Schedule.TimeSlots[1].DayOfWeek
            </td>
            <td>
                @Html.DisplayFor(model => enrollment.Section.Schedule.TimeSlots[0].StartTime) <br />
                @Html.DisplayFor(model => enrollment.Section.Schedule.TimeSlots[1].StartTime)
            </td>

        <td>
            <form method="post">
                <input type="hidden" asp-for="Enrollment.Id" value="@enrollment.Id" />
                <input type="hidden" asp-for="Student.Id" />

                <input type="submit" value="Remove"
                       class="btn btn-primary btn-danger"
                       asp-page-handler="DeleteEnrollment" />
            </form>
        </td>
        </tr>
        }
    </tbody>
</table>



<script>
    var id = document.getElementById('studentId').value;
    var button = document.getElementById('submitButton');
    button.disabled = true;

    function getSections() {
        var dd = document.getElementById('courseDropDown');

        var semdd = document.getElementById('semesterDropDown');
        document.getElementById('courseValidation').innerHTML = "";
        document.getElementById('sectionValidation')
            .innerHTML = "";

        fetch('http://' + window.location.hostname + ':' + window.location.port + '/api/Students/' + id)
            .then((response) => response.json())
            .then((data) => {
                var nextFetch = 1;
                for (i = 0; i < data.enrollments.length; i++) {
                    var enrollment = (data.enrollments)[i];

                    if (enrollment.course.id == dd.value && enrollment.section.semesterId == semdd.value) {
                        document.getElementById('courseValidation').innerHTML = "This course has been already added";
                        nextFetch = 0;
                        console.log("hello");
                        button.disabled = true;
                        break;
                    }

                    var enrollments = data.enrollments;
                }


                select = document.getElementById('sectionDropDown');
                for (i = select.options.length; i >= 0; i--) {
                    select.remove(i);
                }

                console.log(nextFetch);

                if (nextFetch > 0) {
                    fetch('http://' + window.location.hostname + ':' + window.location.port + '/api/Course/' + dd.value)
                        .then((response) => response.json())
                        .then((data) => {
                            let output = document.getElementById('sectionDropDown');
                            let seatCount = document.getElementById('seatCount');
                            seatCount.innerHTML = "";

                            console.log(enrollments);
                            console.log(data);
                            var nextFetch = 0;

                            if (data.prerequisites.length > 0) {
                                for (i = 0; i < data.prerequisites.length; i++) {
                                    var prerequisite = data.prerequisites[i];
                                    //console.log(prerequisite + "vivo");
                                    for (j = 0; j < enrollments.length; j++) {
                                        var enrollment = enrollments[j];
                                        if (prerequisite.prerequisiteId == enrollment.section.courseId) {
                                            nextFetch = 1;
                                        }
                                    }
                                    if (nextFetch == 0) {
                                        document.getElementById('courseValidation')
                                            .innerHTML = "Have to Complete the prereqisites first";
                                        button.disabled = true;
                                        return;
                                    }
                                }
                            } else {
                                nextFetch = 1;
                            }


                            for (i = output.options.length; i >= 0; i--) {
                                output.remove(i);
                            }
                            var option = document.createElement("option");
                            option.value = '#';
                            option.text = "Select Section";
                            output.add(option);
                            output.options[0].disabled = true;

                            if (nextFetch > 0) {
                                (data.sections).forEach(function (section) {
                                    let semdd = document.getElementById('semesterDropDown');
                                    if (section.semesterId == semdd.value) {
                                        var option = document.createElement("option");
                                        option.value = section.id;
                                        option.text = section.number;
                                        output.add(option);
                                    }
                                })
                            }
                        })
                }

            })

        }

    function getSeats() {
        var dd = document.getElementById('sectionDropDown');
        document.getElementById('sectionValidation')
                                .innerHTML = "";
        fetch('http://' + window.location.hostname + ':' + window.location.port+ '/api/Section/' + dd.value)
            .then((response) => response.json())
            .then((data) => {

                let output = document.getElementById('seatCount');
                output.innerHTML = data.seat;

                var selectedSection = data;
                var timeSlots = data.schedule.timeSlots;

                fetch('http://' + window.location.hostname + ':' + window.location.port + '/api/Students/' + id)
                    .then((response) => response.json())
                    .then((data) => {

                        for (i = 0; i < data.sections.length; i++) {
                            var section = data.sections[i];
                            for (j = 0; j < section.schedule.timeSlots.length; j++) {
                                var sectionTimeSlot = section.schedule.timeSlots[j];
                                for (k = 0; k < timeSlots.length; k++) {
                                    time1 = timeSlots[k].startTime.split('T')[1];
                                    time2 = sectionTimeSlot.startTime.split('T')[1];
                                    if (timeSlots[k].dayOfWeek == sectionTimeSlot.dayOfWeek &&
                                        time1 == time2) {
                                        if (section.semesterId == selectedSection.semesterId) {
                                            document.getElementById('sectionValidation')
                                                .innerHTML = "Section Time Conflicts";
                                            button.disabled = true;
                                            return;
                                        }

                                    }
                                }
                            }
                        }
                        button.disabled = false;
                        
                    })
            })
    }
</script>